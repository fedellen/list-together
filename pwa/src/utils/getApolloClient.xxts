import Cookies from 'js-cookie';
import QueueLink from 'apollo-link-queue';
import { HttpLink } from 'apollo-link-http';
import { RetryLink } from 'apollo-link-retry';
import { onError } from '@apollo/client/link/error';
// import { setContext } from 'apollo-link-context'
// import SerializingLink from 'apollo-link-serialize'
import { CachePersistor } from 'apollo-cache-persist';
import { InMemoryCache, ApolloClient, ApolloLink } from '@apollo/client';

const API_HOST = 'http://localhost:4000/graphql';
const SCHEMA_VERSION = '1';
const SCHEMA_VERSION_KEY = 'apollo-schema-version';

const getApolloClient = async () => {
  const httpLink = new HttpLink({ uri: API_HOST });
  const retryLink = new RetryLink({ attempts: { max: Infinity } });

  // const authLink = setContext(({ headers }) => {
  //   const token = Cookies.get('token')

  //   return {
  //     headers: {
  //       ...headers,
  //       Authorization: token ? `Bearer ${token}` : ''
  //     }
  //   }
  // })

  const errorLink = onError(({ networkError, graphQLErrors }) => {
    if (networkError || graphQLErrors) {
      Cookies.remove('omr');
      // window.location.replace('/login')
    }
  });

  const queueLink = new QueueLink();

  window.addEventListener('offline', () => queueLink.close());
  window.addEventListener('online', () => queueLink.open());

  const serializingLink = new SerializingLink();

  const trackerLink = new ApolloLink((operation, forward) => {
    if (forward === undefined) return null;

    const context = operation.getContext();
    const trackedQueries =
      JSON.parse(window.localStorage.getItem('trackedQueries') || null) || [];

    if (context.tracked !== undefined) {
      const { operationName, query, variables } = operation;

      const newTrackedQuery = {
        query,
        context,
        variables,
        operationName
      };

      window.localStorage.setItem(
        'trackedQueries',
        JSON.stringify([...trackedQueries, newTrackedQuery])
      );
    }

    return forward(operation).map((data) => {
      if (context.tracked !== undefined) {
        window.localStorage.setItem(
          'trackedQueries',
          JSON.stringify(trackedQueries)
        );
      }

      return data;
    });
  });

  const link = ApolloLink.from([
    trackerLink,
    queueLink,
    serializingLink,
    retryLink,
    errorLink,
    authLink,
    httpLink
  ]);

  const cache = new InMemoryCache();

  const persistor = new CachePersistor({
    cache,
    storage: window.localStorage
  });

  const currentVersion = window.localStorage.getItem(SCHEMA_VERSION_KEY);

  if (currentVersion === SCHEMA_VERSION) {
    await persistor.restore();
  } else {
    await persistor.purge();
    window.localStorage.setItem(SCHEMA_VERSION_KEY, SCHEMA_VERSION);
  }

  const client = new ApolloClient({
    link,
    cache
  });

  return client;
};

export default getApolloClient;
